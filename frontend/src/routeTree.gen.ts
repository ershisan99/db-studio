/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as RawIndexImport } from './routes/raw/index'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as DbDbNameTablesIndexImport } from './routes/db/$dbName/tables/index'
import { Route as DbDbNameTablesTableNameIndexImport } from './routes/db/$dbName/tables/$tableName/index'
import { Route as DbDbNameTablesTableNameDataImport } from './routes/db/$dbName/tables/$tableName/data'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RawIndexRoute = RawIndexImport.update({
  path: '/raw/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const DbDbNameTablesIndexRoute = DbDbNameTablesIndexImport.update({
  path: '/db/$dbName/tables/',
  getParentRoute: () => rootRoute,
} as any)

const DbDbNameTablesTableNameIndexRoute =
  DbDbNameTablesTableNameIndexImport.update({
    path: '/db/$dbName/tables/$tableName/',
    getParentRoute: () => rootRoute,
  } as any)

const DbDbNameTablesTableNameDataRoute =
  DbDbNameTablesTableNameDataImport.update({
    path: '/db/$dbName/tables/$tableName/data',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/raw/': {
      id: '/raw/'
      path: '/raw'
      fullPath: '/raw'
      preLoaderRoute: typeof RawIndexImport
      parentRoute: typeof rootRoute
    }
    '/db/$dbName/tables/': {
      id: '/db/$dbName/tables/'
      path: '/db/$dbName/tables'
      fullPath: '/db/$dbName/tables'
      preLoaderRoute: typeof DbDbNameTablesIndexImport
      parentRoute: typeof rootRoute
    }
    '/db/$dbName/tables/$tableName/data': {
      id: '/db/$dbName/tables/$tableName/data'
      path: '/db/$dbName/tables/$tableName/data'
      fullPath: '/db/$dbName/tables/$tableName/data'
      preLoaderRoute: typeof DbDbNameTablesTableNameDataImport
      parentRoute: typeof rootRoute
    }
    '/db/$dbName/tables/$tableName/': {
      id: '/db/$dbName/tables/$tableName/'
      path: '/db/$dbName/tables/$tableName'
      fullPath: '/db/$dbName/tables/$tableName'
      preLoaderRoute: typeof DbDbNameTablesTableNameIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AuthLoginRoute,
  RawIndexRoute,
  DbDbNameTablesIndexRoute,
  DbDbNameTablesTableNameDataRoute,
  DbDbNameTablesTableNameIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/login",
        "/raw/",
        "/db/$dbName/tables/",
        "/db/$dbName/tables/$tableName/data",
        "/db/$dbName/tables/$tableName/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/raw/": {
      "filePath": "raw/index.tsx"
    },
    "/db/$dbName/tables/": {
      "filePath": "db/$dbName/tables/index.tsx"
    },
    "/db/$dbName/tables/$tableName/data": {
      "filePath": "db/$dbName/tables/$tableName/data.tsx"
    },
    "/db/$dbName/tables/$tableName/": {
      "filePath": "db/$dbName/tables/$tableName/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
